# -*- coding: utf-8 -*-
"""futureintern_pd_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S7FwldMt6K2t7FaC_DZgE_657NmzYilB
"""

import pygame
import random
import time

# Initialize Pygame
pygame.init()

# Set up display
width, height = 700, 600
game_screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("VRT Snake Game")

# Set up font
font = pygame.font.Font(None, 74)

# Initialize game variables globally
snake_radius = 10
snake_x, snake_y = width // 2, height // 2
modify_x, modify_y = 0, 0
snake_body = [(snake_x, snake_y)]
protein_x, protein_y = random.randrange(0, width - snake_radius * 2, 10), random.randrange(0, height - snake_radius * 2,
                                                                                           10)
game_over = False

# Set up clock
clock = pygame.time.Clock()


def reset_game():
    global snake_x, snake_y, modify_x, modify_y, snake_body, protein_x, protein_y, game_over

    # Initialize variables for a new game
    snake_x, snake_y = width // 2, height // 2
    modify_x, modify_y = 0, 0
    snake_body = [(snake_x, snake_y)]
    protein_x, protein_y = random.randrange(0, width - snake_radius * 2, 10), random.randrange(0,height - snake_radius * 2,10)
    game_over = False


def display_snake():
    global snake_x, snake_y, modify_x, modify_y, protein_x, protein_y, snake_body, game_over

    # Update snake position
    snake_x += modify_x
    snake_y += modify_y

    # Handle screen wrap-around
    if snake_x < 0:
        snake_x = width - snake_radius
    elif snake_x >= width:
        snake_x = 0
    if snake_y < 0:
        snake_y = height - snake_radius
    elif snake_y >= height:
        snake_y = 0

    # Check for collision with protein
    if abs(snake_x - protein_x) < snake_radius * 2 and abs(snake_y - protein_y) < snake_radius * 2:
        protein_x = random.randrange(0, width - snake_radius * 2, 10)
        protein_y = random.randrange(0, height - snake_radius * 2, 10)
    else:
        snake_body.pop(0)

    # Add new head position
    new_head = (snake_x, snake_y)
    snake_body.append(new_head)

    # Check for self-collision
    # Check if new_head collides with any part of the snake body except itself
    if new_head in snake_body[:-1]:
        game_over = True

    # Clear the screen
    game_screen.fill((0, 0, 0))

    # Draw the protein
    pygame.draw.circle(game_screen, (150, 190, 100), (protein_x, protein_y), snake_radius)

    # Draw the snake body
    for (x, y) in snake_body:
        pygame.draw.circle(game_screen, (250, 255, 150), (x, y), snake_radius)

    # Display game over message if needed
    if game_over:
        game_over_text = font.render('Game Over', True, (255, 0, 0))  # Red color for game over
        text_rect = game_over_text.get_rect(center=(width // 2, height // 2 - 40))
        game_screen.blit(game_over_text, text_rect)

        restart_text = font.render('Press R to Restart', True, (255, 255, 255))
        restart_rect = restart_text.get_rect(center=(width // 2, height // 2 + 40))
        game_screen.blit(restart_text, restart_rect)
        pygame.display.update()
        return  # Skip the rest of the loop if game is over

    # Update the display
    pygame.display.update()


# Main game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT and modify_x == 0:
                modify_x = -10
                modify_y = 0
            elif event.key == pygame.K_RIGHT and modify_x == 0:
                modify_x = 10
                modify_y = 0
            elif event.key == pygame.K_UP and modify_y == 0:
                modify_x = 0
                modify_y = -10
            elif event.key == pygame.K_DOWN and modify_y == 0:
                modify_x = 0
                modify_y = 10
            elif event.key == pygame.K_r and game_over:  # Press 'R' to restart
                reset_game()

    if not game_over:
        display_snake()
    else:
        # Display the game over message and ask if the player wants to restart
        game_screen.fill((0, 0, 0))
        game_over_text = font.render('Game Over', True, (255, 0, 0))
        text_rect = game_over_text.get_rect(center=(width // 2, height // 2 - 40))
        game_screen.blit(game_over_text, text_rect)

        restart_text = font.render('Press R to Restart', True, (255, 255, 255))
        restart_rect = restart_text.get_rect(center=(width // 2, height // 2 + 40))
        game_screen.blit(restart_text, restart_rect)

        pygame.display.update()

    clock.tick(12)

